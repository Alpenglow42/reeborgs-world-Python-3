


x2 = 1
y2 = 1



def turn_right():
    #3 lefts make a right
    turn_left()
    turn_left()
    turn_left()
    
def turn_around():
    turn_left()
    turn_left()






def grid_count():
    global x2
    global y2
    while front_is_clear():
        move()
        x2 += 1
        #if not front_is_clear():
            #turn_left()
            
def vertical_count():
    global y2
    global x2
    while front_is_clear():
        move()
        y2 += 1
        if not front_is_clear():
            turn_around()
            for x in range(y2 -1):
                move()
                if not front_is_clear():
                    turn_right()
                    for x in range(x2 -1):
                        move()
                        if not front_is_clear():

                            print(f"x2 = {x2}")
                            print(f"y2 = {y2}")                                   

                                    
                                    
                                    
v = 0 # counts vertically
t = 3 # total count
r = 0 # trigger for right turn
w = 0 # not being used
y = 0 # trigger count for left turn
x = 0 # main move count currently not being used
z = 1 # just for main while loop
o = 0 # object pickup count
a = 0 #first row count horzont
b = 0 # count for each row
def turn_right():
    #3 lefts make a right
    turn_left()
    turn_left()
    turn_left()
    
def turn_around():
    turn_left()
    turn_left()

def take_object():
    #o = 1
    global o
    while object_here():
        take()
        o += 1
        #y += 1

def upper_right():
    global v
    global a
    global t
    print("working")
    
    if t == (x2 * y2):
        if y2 % 2 == 0:
            upper_left_check()
            return_and_toss()
            
        else: #  could also make y2 %2 != 0 #checking for right corner and moves to left and return_and_toss()
            turn_left()
            if not front_is_clear():
                turn_right()
                if not front_is_clear() and right_is_clear():
                    turn_around()
                    for x in range (a):
                        move()
                        take_object()
                        if not front_is_clear():
                            return_and_toss()

        
def upper_left_check(): #checks for corner and turns check for clearance
    if not front_is_clear() and wall_on_right():
        turn_left() #if in upper right left turn would not be clear
        if wall_on_right and front_is_clear():
            turn_right()
                   

                
def return_and_toss(): # starts from upper left corner facing left wall
    if t == (x2 * y2): #last bit to bin toss need different trigger
        turn_left()
        while front_is_clear():
            move()
            take_object()
            if not front_is_clear(): #and if not wall_on right():
                #toss()
                for x in range (o):
                    toss() #need to toss in range of objects found

                if t == (x2 * y2):# return to starting point    
                    turn_left()
                    move()
                    turn_right()
                    move()
                    move()
                    turn_right()
                    move()
                    done()

                                    
                
    
    

def check_pond():
    global b
    global t
    if not front_is_clear(): #check for pond by seeing if can go around.
            turn_left()
            if front_is_clear(): #if not reset
                move()
                turn_right()
                if front_is_clear(): #first step around
                    move()
                    b += 1
                    t += 1
                    print (f"t = {t}")
                    #print(f"cpB = {b}")
                    if front_is_clear(): # will hit wall if not pond here
                        move()
                        b += 1
                        t += 1
                        print (f"t = {t}")
                        #print(f"cpB = {b}")
                        turn_right()
                        if front_is_clear():# second step full around
                            move()
                            turn_left()
                            
                    elif not front_is_clear(): # reverse path if not a pond
                        turn_around()
                        move()
                        turn_left()
                        move()
                        turn_around() #facing orginal direction now



    




def count_width():
   while front_is_clear():
        global a
        global t
        move()
        take_object()
        a += 1
        t += 1
        print(f"a = {a}")
        print (f"t = {t}")

def first_left():
    if not front_is_clear():
        global y
        global r
        global v
        global t
        turn_left()
        move()
        take_object()
        turn_left()
        y += 1
        v += 1
        t += 1
        print (f"t = {t}")
        r = 0
def compare_width():
    
    while front_is_clear():
        global b
        global t
        
        move()
        take_object()
        b += 1
        t += 1
        print (f"t = {t}")

        print(f"b = {b}")
        #if b != a :
            #check_pond()
def trash_bin():
    global t
    while front_is_clear():
        take_object()
        move()
        t += 1
        print (f"t = {t}")
        

def first_right():
    if not front_is_clear():
        global y
        global r
        global v
        global t
        turn_right()
        move()
        take_object()
        turn_right()
        r += 1
        v += 1
        t += 1
        y = 0        

def third_row():
    global t
    #b = 1 #add 1 to be to make count correct for bin row
    for x in range(a -1):
        move()
        t += 1
        print (f"t = {t}")
        take_object()
    if not front_is_clear():
        first_left()
        
        
# storm     
think(0)
grid_count()
turn_left()
vertical_count()
turn_around()
count_width()
first_left()
trash_bin()
first_right()
third_row()
while z == 1:
    take_object()
    print (f"t = {t}")
    print (f"v = {v}")
    
    #while object_here():
        #take()
        #y += 1
        #move()
        #x += 1
    
        
        
    if not object_here():
        if front_is_clear():
            compare_width()
            x += 1
            #t += 1
            print (f"x = {x}")
        
        if b != a:
            print(f"a = {a}")
            print(f"b = {b}")
            check_pond()
        
#        if not front_is_clear() and not right_is_clear():
#            if turn_left():
#                if t == (a * v) and not front_is_clear():
#                    upper_right
#            else:
#                turn_right()
                
            
        elif not front_is_clear(): #and wall_on right():
            if y == 0 and t != (x2 *y2): #left turn
                turn_left()
                if front_is_clear():
                    move()
                    take_object()
                    turn_left()
                    y += 1
                    v += 1
                    t += 1
                    r = 0
                    b = 0
                    #w += 1
            elif r == 0 and t != (x2 * y2):#and w < 3: #right turn
                turn_right()
                if front_is_clear():
                    move()
                    take_object()
                    turn_right()
                    y = 0
                    v += 1
                    r += 1
                    t += 1 
                    b = 0
            elif t == (x2 * y2):
                print(f"T = {t}")
                print(x2 * y2)
                #z = 0 # exits while loop
                upper_right()
            
                
# the main key ended up using x2 and y2 to count and measure size so math for t count work out to trigger if elif statments. However if pond moved more freely this would 
#cause more problems and this wouldn't have worked as well.
# another possible solution could have been to count size and then work from known corner to known corner.
                                    
                                    
                                    
                                    

